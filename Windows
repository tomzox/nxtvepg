$Id: Windows,v 1.2 2000/10/15 17:38:47 tom Exp tom $

Some words about Nextview on Micro$oft Windows
----------------------------------------------

Currently there is no support for Windows.

Lack of support for Windows is mainly due to the fact that I'm anything
but impressed by that OS and hence not quite willing to spend a lot of
time developing for and under it. 

So please don't ask me for Windows support; I won't do it. If you want
to use the decoder under Windows you'll have to invest some time yourself.
What you have to do, I'll describe in the following. An experienced Windows
hacker should be able to get it running in less than a day.


The main problem is to get a driver for teletext acquisition using the
Bt848 chip.  As far as I know, there's no free teletext driver available
for Windows.  However there are a few open-source TV "decoder" applications
that also do a bit of teletext decoding.  If you integrate the Nextview
decoder into one of those it's the easiest way.  For a standalone decoder
you'd have to isolate the teletext from the video parts. Considering the
programming style I have seen in these tools, that could be quite tricky.
In the following I'll only consider the first option.

I recommend to reuse the Tcl/Tk user interface (at least for the start),
because it runs without a single change under Windows too. All you need
is to get the Tcl/Tk 8.3 package from ftp://www.scriptics.com/pub/tcl/
If you wanted to port the user interface to the Windows API you'd have
to replace epgui/epgui.tcl and some of the C files in the same directory
(the Tk text widget is abused quite a lot to allow the tight integration
with the database during acquisition.)  So we're talking about 3000 lines
of Tcl/Tk code plus a couple of thousand lines of C code for the full
browser and filter functionality.

To integrate the decoder into an existing TV application reusing the
Tcl/Tk user interface, do:
- Create a new thread for the Nextview decoder. It's main function is
  NextviewMain() in epgctl/epgmain.c. The thread terminates when the
  browser window is closed.
- Call EpgDbAcqAddPacket() in epgdb/epgdbacq.c for every incoming
  teletext packet (the function just puts all teletext lines into a
  ring buffer. The actual decoding is done in the Nextview thread.)
  The parameters are explained best by the usage of this function in the
  Linux teletext decoder in VbiDecodePacket() in epgctl/vbidecode.c;
  data is a pointer to the 40 data bytes in the teletext packet,
  i.e. not including framing code & packet address which have to be
  decoded externally.

- Use tclsh from the Tcl package to generate epgui/help.tcl from
  nxtvepg.1x just like it's done in the UNIX Makefile.
- Compile tcl2c.c to an executable and use it to generate epgui/epgui.c
  and epgui/help.c from the respective .tcl files in the epgui subdir.
  The egrep that's used in the UNIX Makefile for the same task is not
  essential, it just removes the comments. Simply pipe the Tcl scripts
  to stdin of tcl2c.
- Add all C source files from the epg*/ subdirs and the Tcl and Tk
  libraries from the Tcl/Tk package to the project of the TV application
  (you should keep the directory structure, or you'd have to adapt all
  include paths).

- Compile, link and enjoy.

You'll notice there's already a compiler flag WIN32 being used. That's
because in an earlier version I already had integrated the decoder
into multidec 3.2. But that was just a fast hack that does not work
with the current version anymore.

BTW if you don't want the browser window to open immediately when the
program is started, add the Tcl/Tk command "wm withdraw ." to ui_init()
in epgmain.c.  When the user wants to open the browser window, e.g. by
use of a menu command, invoke "wm deiconify ." from inside the Nextview
thread (how you pass a message to get the thread to do this is up to you)


If you have any questions, feel free to ask.
Please let me know if you get it to work.

Good luck!

-tom
